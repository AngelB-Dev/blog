---
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../../consts';
import { getCollection } from 'astro:content';
import FormattedDate from '../../components/FormattedDate.astro';

const posts = (await getCollection('blog')).sort(
    (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);

const POSTS_PER_PAGE = 25;
---

<!doctype html>
<html lang="en">
    <head>
        <BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
        <style>
            main {
                width: 960px;
            }
            ul {
                display: flex;
                flex-wrap: wrap;
                gap: 2rem;
                list-style-type: none;
                margin: 0;
                padding: 0;
            }
            ul li {
                width: calc(50% - 1rem);
            }
            ul li * {
                text-decoration: none;
                transition: 0.2s ease;
            }
            ul li:first-child {
                width: 100%;
                margin-bottom: 1rem;
                text-align: center;
            }
            ul li:first-child img {
                width: 100%;
            }
            ul li:first-child .title {
                font-size: 2.369rem;
            }
            ul li img {
                margin-bottom: 0.5rem;
                border-radius: 12px;
            }
            ul li a {
                display: block;
            }
            .title {
                margin: 0;
                color: rgb(var(--black));
                line-height: 1;
            }
            .date {
                margin: 0;
                color: rgb(var(--gray));
            }
            ul li a:hover h4,
            ul li a:hover .date {
                color: rgb(var(--accent));
            }
            ul a:hover img {
                box-shadow: var(--box-shadow);
            }
            @media (max-width: 720px) {
                ul {
                    gap: 0.5em;
                }
                ul li {
                    width: 100%;
                    text-align: center;
                }
                ul li:first-child {
                    margin-bottom: 0;
                }
                ul li:first-child .title {
                    font-size: 1.563em;
                }
            }
            .search-container {
                display: flex;
                justify-content: center;
                align-items: center;
                margin-top: 35px;
            }
            #search-input {
                width: 100%;
                max-width: 400px;
                padding: 10px;
                background-color: #2c2c2c;
                color: white;
                border: 1px solid #555;
                border-radius: 20px;
                font-size: 16px;
                transition: all 0.3s ease;
            }
            #search-input:focus {
                outline: none;
                border-color: #888;
                box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
            }
            #search-input::placeholder {
                color: #aaa;
            }
            #load-more {
                display: block;
                margin: 2rem auto;
                padding: 0.5rem 1rem;
                background-color: #4a4a4a;
                color: white;
                border: none;
                border-radius: 5px;
                cursor: pointer;
                transition: background-color 0.3s ease;
            }
            #load-more:hover {
                background-color: #666;
            }
        </style>
    </head>
    <body>
        <Header />
        <div class="search-container">
            <input type="text" id="search-input" placeholder="Buscar posts..." />
        </div>
        <main>
			<section>
				<ul id="posts-container">
					{posts.slice(0, POSTS_PER_PAGE).map((post, index) => {
						const slug = post.slug.split('/').filter(segment => segment !== '').join('/');
						return (
							<li id={`post-${index}`} 
								data-title={post.data.title?.toLowerCase() ?? ''} 
								data-technology={post.data.technology?.toLowerCase() ?? ''}
								aria-label={`Artículo: ${post.data.title}`}>
								<a href={`/blog/${slug}/`}>
									<img 
										width={720} 
										height={360} 
										src={post.data.heroImage} 
										alt={post.data.title}
										loading={index > 0 ? "lazy" : "eager"}
										decoding="async"
									/>
									<h4 class="title">{post.data.title}</h4>
									<p class="date">
										<FormattedDate date={post.data.pubDate} />
									</p>
								</a>
							</li>
						);
					})}
				</ul>
				{posts.length > POSTS_PER_PAGE && (
					<button id="load-more" aria-label="Cargar más artículos">Ver más</button>
				)}
			</section>
        </main>
        <Footer />
		<script define:vars={{ posts, POSTS_PER_PAGE }}>
			let currentPage = 1;
			const loadMoreButton = document.getElementById('load-more');
			const postsContainer = document.getElementById('posts-container');
			const searchInput = document.getElementById('search-input');
		
			function createPostElement(post, index) {
				const existingPost = document.querySelector('#posts-container li');
				const li = existingPost.cloneNode(true);
		
				li.id = `post-${index}`;
				li.dataset.title = post.data.title?.toLowerCase() ?? '';
				li.dataset.technology = post.data.technology?.toLowerCase() ?? '';
		
				const anchor = li.querySelector('a');
				anchor.href = `/blog/${post.slug.split('/').filter((segment, i, array) => 
					i === array.length - 1 ? segment !== array[array.length - 2] : true
				).join('/')}/`;
		
				const img = li.querySelector('img');
				img.src = post.data.heroImage;
				img.alt = post.data.title;
		
				const title = li.querySelector('.title');
				title.textContent = post.data.title;
		
				const date = li.querySelector('.date');
				date.textContent = new Intl.DateTimeFormat('en-EN', { 
					year: 'numeric', 
					month: 'short',
					day: 'numeric' 
				}).format(new Date(post.data.pubDate));
		
				return li;
			}
		
			function loadMorePosts() {
				const startIndex = currentPage * POSTS_PER_PAGE;
				const endIndex = startIndex + POSTS_PER_PAGE;
				const newPosts = posts.slice(startIndex, endIndex);
		
				newPosts.forEach((post, index) => {
					const postElement = createPostElement(post, startIndex + index);
					postsContainer.appendChild(postElement);
				});
		
				currentPage++;
		
				if (endIndex >= posts.length) {
					loadMoreButton.style.display = 'none';
				}
			}
		
			function filterPosts(searchTerm) {
				const allPosts = document.querySelectorAll('#posts-container li');
				
				allPosts.forEach(post => {
					const title = post.dataset.title;
					const technology = post.dataset.technology;
					const isVisible = title.includes(searchTerm) || technology.includes(searchTerm);
					post.style.display = isVisible ? '' : 'none';
				});
			}
		
			loadMoreButton?.addEventListener('click', loadMorePosts);
		
			searchInput?.addEventListener('input', (e) => {
				const searchTerm = e.target.value.toLowerCase();
				filterPosts(searchTerm);
			});
		
			function debounce(func, delay) {
				let timeoutId;
				return function (...args) {
					clearTimeout(timeoutId);
					timeoutId = setTimeout(() => func.apply(this, args), delay);
				};
			}
		
			const debouncedFilterPosts = debounce(filterPosts, 300);
		
			searchInput?.addEventListener('input', (e) => {
				const searchTerm = e.target.value.toLowerCase();
				debouncedFilterPosts(searchTerm);
			});
		
			if ('IntersectionObserver' in window) {
				const lazyImageObserver = new IntersectionObserver((entries, observer) => {
					entries.forEach(entry => {
						if (entry.isIntersecting) {
							const lazyImage = entry.target;
							lazyImage.src = lazyImage.dataset.src;
							lazyImage.classList.remove("lazy");
							lazyImageObserver.unobserve(lazyImage);
						}
					});
				});
		
				document.querySelectorAll('img.lazy').forEach(image => {
					lazyImageObserver.observe(image);
				});
			}
		</script>
    </body>
</html>